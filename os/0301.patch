From 4f7c7251333ed298e3ecfecac258d0ea2a85cfdb Mon Sep 17 00:00:00 2001
From: Tao J <taoj@you.know.it>
Date: Wed, 24 Dec 2014 00:09:04 +0800
Subject: [PATCH 1/3] added a boring system call

---
 Makefile                          |  1 +
 arch/x86/mm/fault.c               |  4 ++++
 arch/x86/syscalls/syscall_64.tbl  |  2 +-
 include/linux/mm.h                |  2 ++
 include/linux/sched.h             |  1 +
 include/uapi/asm-generic/unistd.h |  5 ++++-
 kernel/fork.c                     |  2 ++
 yzz/Makefile                      |  1 +
 yzz/yzz_call.c                    | 12 ++++++++++++
 9 files changed, 28 insertions(+), 2 deletions(-)
 create mode 100644 yzz/Makefile
 create mode 100644 yzz/yzz_call.c

diff --git a/Makefile b/Makefile
index 188523e..2b5dddd 100644
--- a/Makefile
+++ b/Makefile
@@ -782,6 +782,7 @@ export mod_sign_cmd
 
 ifeq ($(KBUILD_EXTMOD),)
 core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= yzz/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index a10c8c7..296dd03 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -1025,6 +1025,7 @@ static inline bool smap_violation(int error_code, struct pt_regs *regs)
  * {,trace_}do_page_fault() have notrace on. Having this an actual function
  * guarantees there's a function trace entry.
  */
+unsigned long yzz_count;
 static void __kprobes noinline
 __do_page_fault(struct pt_regs *regs, unsigned long error_code,
 		unsigned long address)
@@ -1038,6 +1039,9 @@ __do_page_fault(struct pt_regs *regs, unsigned long error_code,
 	tsk = current;
 	mm = tsk->mm;
 
+    yzz_count++;
+    tsk->p_yzz_count++;
+
 	/*
 	 * Detect and handle instructions that would cause a page fault for
 	 * both a tracked kernel page and a userspace page.
diff --git a/arch/x86/syscalls/syscall_64.tbl b/arch/x86/syscalls/syscall_64.tbl
index 7f517ca..80dbc16 100644
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@ -322,7 +322,7 @@
 313	common	finit_module		sys_finit_module
 314	common	sched_setattr		sys_sched_setattr
 315	common	sched_getattr		sys_sched_getattr
-
+316 common  yzz_call        sys_yzz_call
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff --git a/include/linux/mm.h b/include/linux/mm.h
index c1b7414..aff6b19 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2072,5 +2072,7 @@ void __init setup_nr_node_ids(void);
 static inline void setup_nr_node_ids(void) {}
 #endif
 
+extern unsigned long yzz_count;
+
 #endif /* __KERNEL__ */
 #endif /* _LINUX_MM_H */
diff --git a/include/linux/sched.h b/include/linux/sched.h
index ccd0c6f..6eacd09 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1581,6 +1581,7 @@ struct task_struct {
 	unsigned int	sequential_io;
 	unsigned int	sequential_io_avg;
 #endif
+    unsigned long p_yzz_count;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index dde8041..850d0f6 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -697,8 +697,11 @@ __SYSCALL(__NR_sched_setattr, sys_sched_setattr)
 #define __NR_sched_getattr 275
 __SYSCALL(__NR_sched_getattr, sys_sched_getattr)
 
+#define __NR_yzz_call 276
+__SYSCALL(__NR_yzz_call, sys_yzz_call)
+
 #undef __NR_syscalls
-#define __NR_syscalls 276
+#define __NR_syscalls 277
 
 /*
  * All syscalls below here should go away really,
diff --git a/kernel/fork.c b/kernel/fork.c
index c44bff8..b25f06c 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -302,6 +302,8 @@ static struct task_struct *dup_task_struct(struct task_struct *orig)
 	if (!tsk)
 		return NULL;
 
+    tsk->p_yzz_count = 0;
+
 	ti = alloc_thread_info_node(tsk, node);
 	if (!ti)
 		goto free_tsk;
diff --git a/yzz/Makefile b/yzz/Makefile
new file mode 100644
index 0000000..0ba0489
--- /dev/null
+++ b/yzz/Makefile
@@ -0,0 +1 @@
+obj-y := yzz_call.o
diff --git a/yzz/yzz_call.c b/yzz/yzz_call.c
new file mode 100644
index 0000000..1435403
--- /dev/null
+++ b/yzz/yzz_call.c
@@ -0,0 +1,12 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/mm.h>
+
+asmlinkage int sys_yzz_call(void)
+{
+    printk("all_pf:%ld, %s_pf:%ld, parent: %s", yzz_count,
+            current->comm, current->p_yzz_count,
+            current->parent->comm);
+
+    return 0;
+}
-- 
2.1.0

